// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: v3lock.proto
#ifndef GRPC_v3lock_2eproto__INCLUDED
#define GRPC_v3lock_2eproto__INCLUDED

#include "v3lock.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace v3lockpb {

// The lock service exposes client-side locking facilities as a gRPC interface.
class Lock final {
 public:
  static constexpr char const* service_full_name() {
    return "v3lockpb.Lock";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lock acquires a distributed shared lock on a given named lock.
    // On success, it will return a unique key that exists so long as the
    // lock is held by the caller. This key can be used in conjunction with
    // transactions to safely ensure updates to etcd only occur while holding
    // lock ownership. The lock is held until Unlock is called on the key or the
    // lease associate with the owner expires.
    virtual ::grpc::Status Lock(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::v3lockpb::LockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::LockResponse>> AsyncLock(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::LockResponse>>(AsyncLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::LockResponse>> PrepareAsyncLock(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::LockResponse>>(PrepareAsyncLockRaw(context, request, cq));
    }
    // Unlock takes a key returned by Lock and releases the hold on lock. The
    // next Lock caller waiting for the lock will then be woken up and given
    // ownership of the lock.
    virtual ::grpc::Status Unlock(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::v3lockpb::UnlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::UnlockResponse>> AsyncUnlock(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::UnlockResponse>>(AsyncUnlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::UnlockResponse>> PrepareAsyncUnlock(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::UnlockResponse>>(PrepareAsyncUnlockRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Lock acquires a distributed shared lock on a given named lock.
      // On success, it will return a unique key that exists so long as the
      // lock is held by the caller. This key can be used in conjunction with
      // transactions to safely ensure updates to etcd only occur while holding
      // lock ownership. The lock is held until Unlock is called on the key or the
      // lease associate with the owner expires.
      virtual void Lock(::grpc::ClientContext* context, const ::v3lockpb::LockRequest* request, ::v3lockpb::LockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3lockpb::LockResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Lock(::grpc::ClientContext* context, const ::v3lockpb::LockRequest* request, ::v3lockpb::LockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Lock(::grpc::ClientContext* context, const ::v3lockpb::LockRequest* request, ::v3lockpb::LockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3lockpb::LockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3lockpb::LockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Unlock takes a key returned by Lock and releases the hold on lock. The
      // next Lock caller waiting for the lock will then be woken up and given
      // ownership of the lock.
      virtual void Unlock(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest* request, ::v3lockpb::UnlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3lockpb::UnlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Unlock(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest* request, ::v3lockpb::UnlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Unlock(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest* request, ::v3lockpb::UnlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3lockpb::UnlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3lockpb::UnlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::LockResponse>* AsyncLockRaw(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::LockResponse>* PrepareAsyncLockRaw(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::UnlockResponse>* AsyncUnlockRaw(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::v3lockpb::UnlockResponse>* PrepareAsyncUnlockRaw(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Lock(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::v3lockpb::LockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3lockpb::LockResponse>> AsyncLock(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3lockpb::LockResponse>>(AsyncLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3lockpb::LockResponse>> PrepareAsyncLock(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3lockpb::LockResponse>>(PrepareAsyncLockRaw(context, request, cq));
    }
    ::grpc::Status Unlock(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::v3lockpb::UnlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3lockpb::UnlockResponse>> AsyncUnlock(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3lockpb::UnlockResponse>>(AsyncUnlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3lockpb::UnlockResponse>> PrepareAsyncUnlock(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::v3lockpb::UnlockResponse>>(PrepareAsyncUnlockRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Lock(::grpc::ClientContext* context, const ::v3lockpb::LockRequest* request, ::v3lockpb::LockResponse* response, std::function<void(::grpc::Status)>) override;
      void Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3lockpb::LockResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Lock(::grpc::ClientContext* context, const ::v3lockpb::LockRequest* request, ::v3lockpb::LockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Lock(::grpc::ClientContext* context, const ::v3lockpb::LockRequest* request, ::v3lockpb::LockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3lockpb::LockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Lock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3lockpb::LockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Unlock(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest* request, ::v3lockpb::UnlockResponse* response, std::function<void(::grpc::Status)>) override;
      void Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3lockpb::UnlockResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Unlock(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest* request, ::v3lockpb::UnlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Unlock(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest* request, ::v3lockpb::UnlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3lockpb::UnlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Unlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::v3lockpb::UnlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::v3lockpb::LockResponse>* AsyncLockRaw(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v3lockpb::LockResponse>* PrepareAsyncLockRaw(::grpc::ClientContext* context, const ::v3lockpb::LockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v3lockpb::UnlockResponse>* AsyncUnlockRaw(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::v3lockpb::UnlockResponse>* PrepareAsyncUnlockRaw(::grpc::ClientContext* context, const ::v3lockpb::UnlockRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Lock_;
    const ::grpc::internal::RpcMethod rpcmethod_Unlock_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lock acquires a distributed shared lock on a given named lock.
    // On success, it will return a unique key that exists so long as the
    // lock is held by the caller. This key can be used in conjunction with
    // transactions to safely ensure updates to etcd only occur while holding
    // lock ownership. The lock is held until Unlock is called on the key or the
    // lease associate with the owner expires.
    virtual ::grpc::Status Lock(::grpc::ServerContext* context, const ::v3lockpb::LockRequest* request, ::v3lockpb::LockResponse* response);
    // Unlock takes a key returned by Lock and releases the hold on lock. The
    // next Lock caller waiting for the lock will then be woken up and given
    // ownership of the lock.
    virtual ::grpc::Status Unlock(::grpc::ServerContext* context, const ::v3lockpb::UnlockRequest* request, ::v3lockpb::UnlockResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Lock() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lock(::grpc::ServerContext* /*context*/, const ::v3lockpb::LockRequest* /*request*/, ::v3lockpb::LockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLock(::grpc::ServerContext* context, ::v3lockpb::LockRequest* request, ::grpc::ServerAsyncResponseWriter< ::v3lockpb::LockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Unlock() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* /*context*/, const ::v3lockpb::UnlockRequest* /*request*/, ::v3lockpb::UnlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnlock(::grpc::ServerContext* context, ::v3lockpb::UnlockRequest* request, ::grpc::ServerAsyncResponseWriter< ::v3lockpb::UnlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Lock<WithAsyncMethod_Unlock<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Lock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::v3lockpb::LockRequest, ::v3lockpb::LockResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::v3lockpb::LockRequest* request, ::v3lockpb::LockResponse* response) { return this->Lock(context, request, response); }));}
    void SetMessageAllocatorFor_Lock(
        ::grpc::experimental::MessageAllocator< ::v3lockpb::LockRequest, ::v3lockpb::LockResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::v3lockpb::LockRequest, ::v3lockpb::LockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lock(::grpc::ServerContext* /*context*/, const ::v3lockpb::LockRequest* /*request*/, ::v3lockpb::LockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Lock(
      ::grpc::CallbackServerContext* /*context*/, const ::v3lockpb::LockRequest* /*request*/, ::v3lockpb::LockResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Lock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::v3lockpb::LockRequest* /*request*/, ::v3lockpb::LockResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Unlock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::v3lockpb::UnlockRequest, ::v3lockpb::UnlockResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::v3lockpb::UnlockRequest* request, ::v3lockpb::UnlockResponse* response) { return this->Unlock(context, request, response); }));}
    void SetMessageAllocatorFor_Unlock(
        ::grpc::experimental::MessageAllocator< ::v3lockpb::UnlockRequest, ::v3lockpb::UnlockResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::v3lockpb::UnlockRequest, ::v3lockpb::UnlockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* /*context*/, const ::v3lockpb::UnlockRequest* /*request*/, ::v3lockpb::UnlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Unlock(
      ::grpc::CallbackServerContext* /*context*/, const ::v3lockpb::UnlockRequest* /*request*/, ::v3lockpb::UnlockResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Unlock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::v3lockpb::UnlockRequest* /*request*/, ::v3lockpb::UnlockResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Lock<ExperimentalWithCallbackMethod_Unlock<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Lock<ExperimentalWithCallbackMethod_Unlock<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Lock() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lock(::grpc::ServerContext* /*context*/, const ::v3lockpb::LockRequest* /*request*/, ::v3lockpb::LockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Unlock() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* /*context*/, const ::v3lockpb::UnlockRequest* /*request*/, ::v3lockpb::UnlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Lock() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lock(::grpc::ServerContext* /*context*/, const ::v3lockpb::LockRequest* /*request*/, ::v3lockpb::LockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Unlock() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* /*context*/, const ::v3lockpb::UnlockRequest* /*request*/, ::v3lockpb::UnlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Lock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Lock(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lock(::grpc::ServerContext* /*context*/, const ::v3lockpb::LockRequest* /*request*/, ::v3lockpb::LockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Lock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Lock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Unlock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Unlock(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* /*context*/, const ::v3lockpb::UnlockRequest* /*request*/, ::v3lockpb::UnlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Unlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Unlock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Lock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Lock() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v3lockpb::LockRequest, ::v3lockpb::LockResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::v3lockpb::LockRequest, ::v3lockpb::LockResponse>* streamer) {
                       return this->StreamedLock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Lock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Lock(::grpc::ServerContext* /*context*/, const ::v3lockpb::LockRequest* /*request*/, ::v3lockpb::LockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v3lockpb::LockRequest,::v3lockpb::LockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Unlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Unlock() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::v3lockpb::UnlockRequest, ::v3lockpb::UnlockResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::v3lockpb::UnlockRequest, ::v3lockpb::UnlockResponse>* streamer) {
                       return this->StreamedUnlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Unlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Unlock(::grpc::ServerContext* /*context*/, const ::v3lockpb::UnlockRequest* /*request*/, ::v3lockpb::UnlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::v3lockpb::UnlockRequest,::v3lockpb::UnlockResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Lock<WithStreamedUnaryMethod_Unlock<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Lock<WithStreamedUnaryMethod_Unlock<Service > > StreamedService;
};

}  // namespace v3lockpb


#endif  // GRPC_v3lock_2eproto__INCLUDED

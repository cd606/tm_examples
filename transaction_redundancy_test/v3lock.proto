//This is adapted from https://github.com/etcd-io/etcd/blob/master/etcdserver/api/v3lock/v3lockpb/v3lock.proto
//In particular, all the golang-related imports are removed
//and ResponseHeader is re-defined in package v3lockpb, so that
//this becomes a somewhat self-contained proto file

syntax = "proto3";
package v3lockpb;

import "google/api/annotations.proto";

// The lock service exposes client-side locking facilities as a gRPC interface.
service Lock {
  // Lock acquires a distributed shared lock on a given named lock.
  // On success, it will return a unique key that exists so long as the
  // lock is held by the caller. This key can be used in conjunction with
  // transactions to safely ensure updates to etcd only occur while holding
  // lock ownership. The lock is held until Unlock is called on the key or the
  // lease associate with the owner expires.
  rpc Lock(LockRequest) returns (LockResponse) {
      option (google.api.http) = {
        post: "/v3/lock/lock"
        body: "*"
    };
  }

  // Unlock takes a key returned by Lock and releases the hold on lock. The
  // next Lock caller waiting for the lock will then be woken up and given
  // ownership of the lock.
  rpc Unlock(UnlockRequest) returns (UnlockResponse) {
      option (google.api.http) = {
        post: "/v3/lock/unlock"
        body: "*"
    };
  }
}

message LockRequest {
  // name is the identifier for the distributed shared lock to be acquired.
  bytes name = 1;
  // lease is the ID of the lease that will be attached to ownership of the
  // lock. If the lease expires or is revoked and currently holds the lock,
  // the lock is automatically released. Calls to Lock with the same lease will
  // be treated as a single acquisition; locking twice with the same lease is a
  // no-op.
  int64 lease = 2;
}

message LockResponse {
  ResponseHeader header = 1;
  // key is a key that will exist on etcd for the duration that the Lock caller
  // owns the lock. Users should not modify this key or the lock may exhibit
  // undefined behavior.
  bytes key = 2;
}

message UnlockRequest {
  // key is the lock ownership key granted by Lock.
  bytes key = 1;
}

message UnlockResponse {
  ResponseHeader header = 1;
}

message ResponseHeader {
  // cluster_id is the ID of the cluster which sent the response.
  uint64 cluster_id = 1;
  // member_id is the ID of the member which sent the response.
  uint64 member_id = 2;
  // revision is the key-value store revision when the request was applied.
  int64 revision = 3;
  // raft_term is the raft term when the request was applied.
  uint64 raft_term = 4;
}
